<?php

/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.11
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

// Try to load our extension if it's not already loaded.
if (!extension_loaded('libabf')) {
  if (strtolower(substr(PHP_OS, 0, 3)) === 'win') {
    if (!dl('php_libabf.dll')) return;
  } else {
    // PHP_SHLIB_SUFFIX gives 'dylib' on MacOS X but modules are 'so'.
    if (PHP_SHLIB_SUFFIX === 'dylib') {
      if (!dl('libabf.so')) return;
    } else {
      if (!dl('libabf.'.PHP_SHLIB_SUFFIX)) return;
    }
  }
}



abstract class libabf {
	static function DecodeToRawAudio($Filename) {
		return DecodeToRawAudio($Filename);
	}

	static function EncodeABF($AE,$TempFile) {
		return EncodeABF($AE,$TempFile);
	}
}

/* PHP Proxy Classes */
class AbfDecoder {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'thisown') return swig_libabf_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __get($var) {
		if ($var === 'thisown') return swig_libabf_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __construct($Filename=null) {
		if (is_resource($Filename) && get_resource_type($Filename) === '_p_ABF__AbfDecoder') {
			$this->_cPtr=$Filename;
			return;
		}
		switch (func_num_args()) {
		case 0: $this->_cPtr=new_AbfDecoder(); break;
		default: $this->_cPtr=new_AbfDecoder($Filename);
		}
	}

	function Initialize($Filename) {
		AbfDecoder_Initialize($this->_cPtr,$Filename);
	}

	function Reset() {
		AbfDecoder_Reset($this->_cPtr);
	}

	function IsValid() {
		return AbfDecoder_IsValid($this->_cPtr);
	}

	function IsOpen() {
		return AbfDecoder_IsOpen($this->_cPtr);
	}

	function GetTitle() {
		return AbfDecoder_GetTitle($this->_cPtr);
	}

	function GetAuthor() {
		return AbfDecoder_GetAuthor($this->_cPtr);
	}

	function GetTime() {
		return AbfDecoder_GetTime($this->_cPtr);
	}

	function GetNumSections() {
		return AbfDecoder_GetNumSections($this->_cPtr);
	}

	function GetHeaderSize() {
		return AbfDecoder_GetHeaderSize($this->_cPtr);
	}

	function GetMajor() {
		return AbfDecoder_GetMajor($this->_cPtr);
	}

	function GetMinor() {
		return AbfDecoder_GetMinor($this->_cPtr);
	}

	function feof() {
		return AbfDecoder_feof($this->_cPtr);
	}

	function ftell() {
		return AbfDecoder_ftell($this->_cPtr);
	}

	function fclose() {
		AbfDecoder_fclose($this->_cPtr);
	}

	function Seek($offset,$whence) {
		return AbfDecoder_Seek($this->_cPtr,$offset,$whence);
	}

	function GetSections() {
		return AbfDecoder_GetSections($this->_cPtr);
	}

	function Decode($Output) {
		AbfDecoder_Decode($this->_cPtr,$Output);
	}

	function GoToPosition($Minutes) {
		return AbfDecoder_GoToPosition($this->_cPtr,$Minutes);
	}
}

class AbfEncoder {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'thisown') return swig_libabf_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __get($var) {
		if ($var === 'thisown') return swig_libabf_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __construct($Filename=null) {
		if (is_resource($Filename) && get_resource_type($Filename) === '_p_ABF__AbfEncoder') {
			$this->_cPtr=$Filename;
			return;
		}
		switch (func_num_args()) {
		case 0: $this->_cPtr=new_AbfEncoder(); break;
		default: $this->_cPtr=new_AbfEncoder($Filename);
		}
	}

	function Initialize($arg1) {
		AbfEncoder_Initialize($this->_cPtr,$arg1);
	}

	function SetTitle($Title) {
		AbfEncoder_SetTitle($this->_cPtr,$Title);
	}

	function SetAuthor($Author) {
		AbfEncoder_SetAuthor($this->_cPtr,$Author);
	}

	function SetTime($Time) {
		AbfEncoder_SetTime($this->_cPtr,$Time);
	}

	function SetNumSections($NumSections) {
		AbfEncoder_SetNumSections($this->_cPtr,$NumSections);
	}

	function WriteHeader() {
		AbfEncoder_WriteHeader($this->_cPtr);
	}

	function WriteSection() {
		AbfEncoder_WriteSection($this->_cPtr);
	}

	function Encode($Input) {
		AbfEncoder_Encode($this->_cPtr,$Input);
	}
}


?>
