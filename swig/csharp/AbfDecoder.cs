/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.11
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

public class AbfDecoder : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal AbfDecoder(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(AbfDecoder obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~AbfDecoder() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          libabfPINVOKE.delete_AbfDecoder(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
    }
  }

  public AbfDecoder(string Filename) : this(libabfPINVOKE.new_AbfDecoder__SWIG_0(Filename), true) {
  }

  public AbfDecoder() : this(libabfPINVOKE.new_AbfDecoder__SWIG_1(), true) {
  }

  public void Initialize(string Filename) {
    libabfPINVOKE.AbfDecoder_Initialize(swigCPtr, Filename);
  }

  public void Reset() {
    libabfPINVOKE.AbfDecoder_Reset(swigCPtr);
  }

  public bool IsValid() {
    bool ret = libabfPINVOKE.AbfDecoder_IsValid(swigCPtr);
    return ret;
  }

  public bool IsOpen() {
    bool ret = libabfPINVOKE.AbfDecoder_IsOpen(swigCPtr);
    return ret;
  }

  public string GetTitle() {
    string ret = libabfPINVOKE.AbfDecoder_GetTitle(swigCPtr);
    return ret;
  }

  public string GetAuthor() {
    string ret = libabfPINVOKE.AbfDecoder_GetAuthor(swigCPtr);
    return ret;
  }

  public string GetTime() {
    string ret = libabfPINVOKE.AbfDecoder_GetTime(swigCPtr);
    return ret;
  }

  public ushort GetNumSections() {
    ushort ret = libabfPINVOKE.AbfDecoder_GetNumSections(swigCPtr);
    return ret;
  }

  public ushort GetHeaderSize() {
    ushort ret = libabfPINVOKE.AbfDecoder_GetHeaderSize(swigCPtr);
    return ret;
  }

  public ushort GetMajor() {
    ushort ret = libabfPINVOKE.AbfDecoder_GetMajor(swigCPtr);
    return ret;
  }

  public ushort GetMinor() {
    ushort ret = libabfPINVOKE.AbfDecoder_GetMinor(swigCPtr);
    return ret;
  }

  public bool feof() {
    bool ret = libabfPINVOKE.AbfDecoder_feof(swigCPtr);
    return ret;
  }

  public int ftell() {
    int ret = libabfPINVOKE.AbfDecoder_ftell(swigCPtr);
    return ret;
  }

  public void fclose() {
    libabfPINVOKE.AbfDecoder_fclose(swigCPtr);
  }

  public int Seek(int offset, int whence) {
    int ret = libabfPINVOKE.AbfDecoder_Seek(swigCPtr, offset, whence);
    return ret;
  }

  public SWIGTYPE_p_int GetSections() {
    IntPtr cPtr = libabfPINVOKE.AbfDecoder_GetSections(swigCPtr);
    SWIGTYPE_p_int ret = (cPtr == IntPtr.Zero) ? null : new SWIGTYPE_p_int(cPtr, false);
    return ret;
  }

  public void Decode(SWIGTYPE_p_short Output) {
    libabfPINVOKE.AbfDecoder_Decode(swigCPtr, SWIGTYPE_p_short.getCPtr(Output));
  }

  public bool GoToPosition(int Minutes) {
    bool ret = libabfPINVOKE.AbfDecoder_GoToPosition(swigCPtr, Minutes);
    return ret;
  }

}
